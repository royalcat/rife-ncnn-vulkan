// rife implemented with ncnn library

#version 450

#if NCNN_fp16_storage
#extension GL_EXT_shader_16bit_storage: require
#endif

layout (binding = 0) buffer flow_blob { sfp flow_blob_data[]; };
layout (binding = 1) buffer flow_reversed_blob { sfp flow_reversed_blob_data[]; };

layout (push_constant) uniform parameter
{
    int w;
    int h;
    int cstep;
} p;

void main()
{
    int gx = int(gl_GlobalInvocationID.x);
    int gy = int(gl_GlobalInvocationID.y);
    int gz = int(gl_GlobalInvocationID.z);

    if (gx >= p.w || gy >= p.h || gz >= 1)
        return;

    afp x = buffer_ld1(flow_blob_data, gy * p.w + gx);
    afp y = buffer_ld1(flow_blob_data, p.cstep + gy * p.w + gx);

    afp x_reversed = buffer_ld1(flow_reversed_blob_data, gy * p.w + gx);
    afp y_reversed = buffer_ld1(flow_reversed_blob_data, p.cstep + gy * p.w + gx);

    x = (x - x_reversed) * afp(0.5);
    y = (y - y_reversed) * afp(0.5);

    buffer_st1(flow_blob_data, gy * p.w + gx, x);
    buffer_st1(flow_blob_data, p.cstep + gy * p.w + gx, y);

    buffer_st1(flow_reversed_blob_data, gy * p.w + gx, -x);
    buffer_st1(flow_reversed_blob_data, p.cstep + gy * p.w + gx, -y);
}
